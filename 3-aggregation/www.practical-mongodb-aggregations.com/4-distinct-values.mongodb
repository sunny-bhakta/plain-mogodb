/*
* Scenario:
* You have a MongoDB collection named 'persons'. Each document in this collection represents a person and contains a 'language' field. 
* The 'language' field can either be a single string (for one language) or an array of strings (for multiple languages), 
* indicating the languages spoken by that person.
*
* Goal:
* Generate an alphabetically sorted list of all unique languages spoken by people in the collection. 
* This list should be suitable for use in a UI dropdown menu.
*
* Approach:
* 1. Use $addFields to ensure the 'language' field is always treated as an array.
* 2. Use $unwind to flatten the 'language' array so each language appears in its own document.
* 3. Use $group to collect distinct language values.
* 4. Use $sort to order the languages alphabetically.
* 5. Use $project to rename _id to 'language' and remove the _id field from the output.
*/

db = db.getSiblingDB("testdb");
db.dropDatabase();

use("testdb");

// Insert records into the persons collection
db.persons.insertMany([
  { firstname: "Elise", lastname: "Smith", vocation: "ENGINEER", language: "English" },
  { firstname: "Olive", lastname: "Ranieri", vocation: "ENGINEER", language: ["Italian", "English"] },
  { firstname: "Toni", lastname: "Jones", vocation: "POLITICIAN", language: ["English", "Welsh"] },
  { firstname: "Bert", lastname: "Gooding", vocation: "FLORIST", language: "English" },
  { firstname: "Sophie", lastname: "Celements", vocation: "ENGINEER", language: ["Gaelic", "English"] },
  { firstname: "Carl", lastname: "Simmons", vocation: "ENGINEER", language: "English" },
  { firstname: "Diego", lastname: "Lopez", vocation: "CHEF", language: "Spanish" },
  { firstname: "Helmut", lastname: "Schneider", vocation: "NURSE", language: "German" },
  { firstname: "Valerie", lastname: "Dubois", vocation: "SCIENTIST", language: "French" }
]);

// Aggregation pipeline to get unique, sorted languages
const pipeline = [

  // 1. Ensure 'language' is always an array (handles both string and array cases)
  {
    $addFields: {
      language: {
        $cond: [
          { $isArray: "$language" }, // If 'language' is already an array
          "$language",               // use as is
          ["$language"]              // else wrap single value in an array
        ]
      }
    }
  },

  // 2. Unwind the 'language' array so each language appears in its own document
  { $unwind: "$language" },

  // 3. Group by language to get distinct values
  { $group: { _id: "$language" } },

  // 4. Sort languages alphabetically
  { $sort: { _id: 1 } },

  // 5. Rename _id to 'language' and remove _id field from output
  { $project: { language: "$_id", _id: 0 } }
];

db.persons.aggregate(pipeline);
