/*
 * Scenario:
 *   A 3rd party has imported a set of retail orders into a MongoDB collection, but all data typing was lost (all field values are stored as strings).
 *   You want to restore the correct data types for all documents and copy them into a new "cleaned" collection.
 *   Since you know the original types, you can apply type transformation logic in the aggregation pipeline.
 *
 * Goal:
 *   Produce a new collection with the same documents as the original, but with correct data types applied to each field.
 *
 * Approach:
 *   1. Use $set to convert each field to the required type using the appropriate conversion operator (e.g., $toDate, $toDecimal, $toInt, $switch).
 *   2. Use $merge to output the transformed documents to a new collection.
 *
 * Note:
 *   This example assumes all documents in the source collection have the same structure.
 */

db = db.getSiblingDB("testdb");
db.dropDatabase();

use("testdb");

// Insert orders documents
db.orders.insertMany([
  {
    "customer_id": "elise_smith@myemail.com",
    "order_date": "2020-05-30T08:35:52",
    "value": "231.43",
    "further_info": {
      "item_qty": "3",
      "reported": "false",
    },
  },
  {
    "customer_id": "oranieri@warmmail.com",
    "order_date": "2020-01-01T08:25:37",
    "value": "63.13",
    "further_info": {
      "item_qty": "2",
    },
  },
  {
    "customer_id": "tj@wheresmyemail.com",
    "order_date": "2019-05-28T19:13:32",
    "value": "2.01",
    "further_info": {
      "item_qty": "1",
      "reported": "true",
    },
  },  
]);

var pipeline = [
  // Convert strings to required types
  {"$set": {
    "order_date": {"$toDate": "$order_date"},    
    "value": {"$toDecimal": "$value"},
    "further_info.item_qty": {"$toInt": "$further_info.item_qty"},
    "further_info.reported": {"$switch": {
      "branches": [
        {"case": {"$eq": [{"$toLower": "$further_info.reported"}, "true"]}, "then": true},
        {"case": {"$eq": [{"$toLower": "$further_info.reported"}, "false"]}, "then": false},
      ],
      "default": {"$ifNull": ["$further_info.reported", "$$REMOVE"]},
    }},     
  }},     
  
  // Output to an unsharded or sharded collection
  {"$merge": {
    "into": "orders_typed",
  }},    
];


db.orders.aggregate(pipeline);

db.orders_typed.find();
