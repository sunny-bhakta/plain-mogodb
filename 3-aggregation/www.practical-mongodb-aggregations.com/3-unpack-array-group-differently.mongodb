/*
 *  Scenario:
 *  Generate a retail report that lists, for each expensive product (priced over $15), 
 *  the total sales value and the quantity sold. 
 *  The source data consists of shop orders, where each order contains an array of purchased products.
 *
 *  Steps:
 *    1. Flatten the products array using $unwind so each product appears as a separate document.
 *    2. Filter for products with a price greater than $15 using $match.
 *    3. Group by product ID with $group, calculating:
 *         - total_value: the sum of product prices
 *         - quantity: the count of products sold
 *    4. Rename the _id field to product_id using $set.
 *    5. Remove the _id field using $unset.
 */

db = db.getSiblingDB("testdb");
db.dropDatabase();

use("testdb");

// Insert sample orders
db.orders.insertMany([
  {
    order_id: 6363763262239,
    products: [
      { prod_id: "abc12345", name: "Asus Laptop", price: NumberDecimal("431.43") },
      { prod_id: "def45678", name: "Karcher Hose Set", price: NumberDecimal("22.13") },
    ],
  },
  {
    order_id: 1197372932325,
    products: [
      { prod_id: "abc12345", name: "Asus Laptop", price: NumberDecimal("429.99") },
    ],
  },
  {
    order_id: 9812343774839,
    products: [
      { prod_id: "pqr88223", name: "Morphy Richardds Food Mixer", price: NumberDecimal("431.43") },
      { prod_id: "def45678", name: "Karcher Hose Set", price: NumberDecimal("21.78") },
    ],
  },
  {
    order_id: 4433997244387,
    products: [
      { prod_id: "def45678", name: "Karcher Hose Set", price: NumberDecimal("23.43") },
      { prod_id: "jkl77336", name: "Picky Pencil Sharpener", price: NumberDecimal("0.67") },
      { prod_id: "xyz11228", name: "Russell Hobbs Chrome Kettle", price: NumberDecimal("15.76") },
    ],
  },
]);

// Aggregation pipeline for retail report
const pipeline = [
  // 1. Flatten products array
  { $unwind: "$products" },

  // 2. Only expensive products (> $15)
  { $match: { "products.price": { $gt: NumberDecimal("15.00") } } },

  // 3. Group by product ID
  {
    $group: {
      _id: "$products.prod_id",
      product: { $first: "$products.name" },
      total_value: { $sum: "$products.price" },
      quantity: { $sum: 1 },
    },
  },

  // 4. Rename _id to product_id
  { $set: { product_id: "$_id" } },

  // 5. Remove _id field
  { $unset: "_id" },
];

db.orders.aggregate(pipeline);
